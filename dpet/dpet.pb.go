// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.2
// source: dpet.proto

package dpet

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 文件类型枚举
type FileType int32

const (
	FileType_RawData              FileType = 0
	FileType_ListModeCoin         FileType = 1
	FileType_Mich                 FileType = 2
	FileType_Img                  FileType = 3
	FileType_EnergyCalibrationMap FileType = 4
	FileType_TimeCalibrationMap   FileType = 5
	FileType_EnergySpectrumData   FileType = 6
)

// Enum value maps for FileType.
var (
	FileType_name = map[int32]string{
		0: "RawData",
		1: "ListModeCoin",
		2: "Mich",
		3: "Img",
		4: "EnergyCalibrationMap",
		5: "TimeCalibrationMap",
		6: "EnergySpectrumData",
	}
	FileType_value = map[string]int32{
		"RawData":              0,
		"ListModeCoin":         1,
		"Mich":                 2,
		"Img":                  3,
		"EnergyCalibrationMap": 4,
		"TimeCalibrationMap":   5,
		"EnergySpectrumData":   6,
	}
)

func (x FileType) Enum() *FileType {
	p := new(FileType)
	*p = x
	return p
}

func (x FileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileType) Descriptor() protoreflect.EnumDescriptor {
	return file_dpet_proto_enumTypes[0].Descriptor()
}

func (FileType) Type() protoreflect.EnumType {
	return &file_dpet_proto_enumTypes[0]
}

func (x FileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileType.Descriptor instead.
func (FileType) EnumDescriptor() ([]byte, []int) {
	return file_dpet_proto_rawDescGZIP(), []int{0}
}

// 数据区传输语义
type DataTransferSyntax int32

const (
	DataTransferSyntax_Deflate DataTransferSyntax = 0
)

// Enum value maps for DataTransferSyntax.
var (
	DataTransferSyntax_name = map[int32]string{
		0: "Deflate",
	}
	DataTransferSyntax_value = map[string]int32{
		"Deflate": 0,
	}
)

func (x DataTransferSyntax) Enum() *DataTransferSyntax {
	p := new(DataTransferSyntax)
	*p = x
	return p
}

func (x DataTransferSyntax) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataTransferSyntax) Descriptor() protoreflect.EnumDescriptor {
	return file_dpet_proto_enumTypes[1].Descriptor()
}

func (DataTransferSyntax) Type() protoreflect.EnumType {
	return &file_dpet_proto_enumTypes[1]
}

func (x DataTransferSyntax) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataTransferSyntax.Descriptor instead.
func (DataTransferSyntax) EnumDescriptor() ([]byte, []int) {
	return file_dpet_proto_rawDescGZIP(), []int{1}
}

type PetFileHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicInfo      *PublicInfo      `protobuf:"bytes,1,opt,name=publicInfo,proto3" json:"publicInfo,omitempty"`
	ScanInfo        *ScanInfo        `protobuf:"bytes,2,opt,name=scanInfo,proto3" json:"scanInfo,omitempty"`
	AcquisitionInfo *AcquisitionInfo `protobuf:"bytes,3,opt,name=acquisitionInfo,proto3" json:"acquisitionInfo,omitempty"`
	ScannerInfo     *ScannerInfo     `protobuf:"bytes,4,opt,name=scannerInfo,proto3" json:"scannerInfo,omitempty"`
	CoincidenceInfo *CoincidenceInfo `protobuf:"bytes,5,opt,name=coincidenceInfo,proto3" json:"coincidenceInfo,omitempty"`
	ImageInfo       *ImageInfo       `protobuf:"bytes,6,opt,name=imageInfo,proto3" json:"imageInfo,omitempty"`
}

func (x *PetFileHeader) Reset() {
	*x = PetFileHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpet_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PetFileHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PetFileHeader) ProtoMessage() {}

func (x *PetFileHeader) ProtoReflect() protoreflect.Message {
	mi := &file_dpet_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PetFileHeader.ProtoReflect.Descriptor instead.
func (*PetFileHeader) Descriptor() ([]byte, []int) {
	return file_dpet_proto_rawDescGZIP(), []int{0}
}

func (x *PetFileHeader) GetPublicInfo() *PublicInfo {
	if x != nil {
		return x.PublicInfo
	}
	return nil
}

func (x *PetFileHeader) GetScanInfo() *ScanInfo {
	if x != nil {
		return x.ScanInfo
	}
	return nil
}

func (x *PetFileHeader) GetAcquisitionInfo() *AcquisitionInfo {
	if x != nil {
		return x.AcquisitionInfo
	}
	return nil
}

func (x *PetFileHeader) GetScannerInfo() *ScannerInfo {
	if x != nil {
		return x.ScannerInfo
	}
	return nil
}

func (x *PetFileHeader) GetCoincidenceInfo() *CoincidenceInfo {
	if x != nil {
		return x.CoincidenceInfo
	}
	return nil
}

func (x *PetFileHeader) GetImageInfo() *ImageInfo {
	if x != nil {
		return x.ImageInfo
	}
	return nil
}

// 公共信息
type PublicInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileType           FileType           `protobuf:"varint,1,opt,name=fileType,proto3,enum=FileType" json:"fileType,omitempty"`
	DataTransferSyntax DataTransferSyntax `protobuf:"varint,2,opt,name=dataTransferSyntax,proto3,enum=DataTransferSyntax" json:"dataTransferSyntax,omitempty"`
	MD5                string             `protobuf:"bytes,3,opt,name=MD5,proto3" json:"MD5,omitempty"` // 数据区的md5值，用于文件校验
}

func (x *PublicInfo) Reset() {
	*x = PublicInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpet_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicInfo) ProtoMessage() {}

func (x *PublicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dpet_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicInfo.ProtoReflect.Descriptor instead.
func (*PublicInfo) Descriptor() ([]byte, []int) {
	return file_dpet_proto_rawDescGZIP(), []int{1}
}

func (x *PublicInfo) GetFileType() FileType {
	if x != nil {
		return x.FileType
	}
	return FileType_RawData
}

func (x *PublicInfo) GetDataTransferSyntax() DataTransferSyntax {
	if x != nil {
		return x.DataTransferSyntax
	}
	return DataTransferSyntax_Deflate
}

func (x *PublicInfo) GetMD5() string {
	if x != nil {
		return x.MD5
	}
	return ""
}

// 扫描信息
type ScanInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AngleNum       int32   `protobuf:"varint,1,opt,name=angleNum,proto3" json:"angleNum,omitempty"`
	CtBedIndex     int32   `protobuf:"varint,2,opt,name=ctBedIndex,proto3" json:"ctBedIndex,omitempty"`
	CtBedNum       int32   `protobuf:"varint,3,opt,name=ctBedNum,proto3" json:"ctBedNum,omitempty"`
	CtScanLength   int32   `protobuf:"varint,4,opt,name=ctScanLength,proto3" json:"ctScanLength,omitempty"`
	CtScanMode     string  `protobuf:"bytes,5,opt,name=ctScanMode,proto3" json:"ctScanMode,omitempty"`
	Current        int32   `protobuf:"varint,6,opt,name=current,proto3" json:"current,omitempty"`
	Date           string  `protobuf:"bytes,7,opt,name=date,proto3" json:"date,omitempty"`
	Description    string  `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	Device         string  `protobuf:"bytes,9,opt,name=device,proto3" json:"device,omitempty"`
	Dose           float64 `protobuf:"fixed64,10,opt,name=dose,proto3" json:"dose,omitempty"`
	Injection      int32   `protobuf:"varint,11,opt,name=injection,proto3" json:"injection,omitempty"`
	InjectionAt    string  `protobuf:"bytes,12,opt,name=injectionAt,proto3" json:"injectionAt,omitempty"`
	IsCoinWithScan bool    `protobuf:"varint,13,opt,name=isCoinWithScan,proto3" json:"isCoinWithScan,omitempty"`
	Modality       string  `protobuf:"bytes,14,opt,name=modality,proto3" json:"modality,omitempty"`
	Orientation    string  `protobuf:"bytes,15,opt,name=orientation,proto3" json:"orientation,omitempty"`
	PetBedIndex    int32   `protobuf:"varint,16,opt,name=petBedIndex,proto3" json:"petBedIndex,omitempty"`
	PetBedNum      int32   `protobuf:"varint,17,opt,name=petBedNum,proto3" json:"petBedNum,omitempty"`
	PetCtFirst     string  `protobuf:"bytes,18,opt,name=petCtFirst,proto3" json:"petCtFirst,omitempty"`
	PetScanMode    string  `protobuf:"bytes,19,opt,name=petScanMode,proto3" json:"petScanMode,omitempty"`
	PetScanTime    string  `protobuf:"bytes,20,opt,name=petScanTime,proto3" json:"petScanTime,omitempty"`
	Preparation    int32   `protobuf:"varint,21,opt,name=preparation,proto3" json:"preparation,omitempty"`
	PreparationAt  string  `protobuf:"bytes,22,opt,name=preparationAt,proto3" json:"preparationAt,omitempty"`
	Residual       int32   `protobuf:"varint,23,opt,name=residual,proto3" json:"residual,omitempty"`
	ResidualAt     string  `protobuf:"bytes,24,opt,name=residualAt,proto3" json:"residualAt,omitempty"`
	ScanId         string  `protobuf:"bytes,25,opt,name=scanId,proto3" json:"scanId,omitempty"`
	Tracer         string  `protobuf:"bytes,26,opt,name=tracer,proto3" json:"tracer,omitempty"`
	Voltage        int32   `protobuf:"varint,27,opt,name=voltage,proto3" json:"voltage,omitempty"`
}

func (x *ScanInfo) Reset() {
	*x = ScanInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpet_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanInfo) ProtoMessage() {}

func (x *ScanInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dpet_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanInfo.ProtoReflect.Descriptor instead.
func (*ScanInfo) Descriptor() ([]byte, []int) {
	return file_dpet_proto_rawDescGZIP(), []int{2}
}

func (x *ScanInfo) GetAngleNum() int32 {
	if x != nil {
		return x.AngleNum
	}
	return 0
}

func (x *ScanInfo) GetCtBedIndex() int32 {
	if x != nil {
		return x.CtBedIndex
	}
	return 0
}

func (x *ScanInfo) GetCtBedNum() int32 {
	if x != nil {
		return x.CtBedNum
	}
	return 0
}

func (x *ScanInfo) GetCtScanLength() int32 {
	if x != nil {
		return x.CtScanLength
	}
	return 0
}

func (x *ScanInfo) GetCtScanMode() string {
	if x != nil {
		return x.CtScanMode
	}
	return ""
}

func (x *ScanInfo) GetCurrent() int32 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *ScanInfo) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *ScanInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ScanInfo) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *ScanInfo) GetDose() float64 {
	if x != nil {
		return x.Dose
	}
	return 0
}

func (x *ScanInfo) GetInjection() int32 {
	if x != nil {
		return x.Injection
	}
	return 0
}

func (x *ScanInfo) GetInjectionAt() string {
	if x != nil {
		return x.InjectionAt
	}
	return ""
}

func (x *ScanInfo) GetIsCoinWithScan() bool {
	if x != nil {
		return x.IsCoinWithScan
	}
	return false
}

func (x *ScanInfo) GetModality() string {
	if x != nil {
		return x.Modality
	}
	return ""
}

func (x *ScanInfo) GetOrientation() string {
	if x != nil {
		return x.Orientation
	}
	return ""
}

func (x *ScanInfo) GetPetBedIndex() int32 {
	if x != nil {
		return x.PetBedIndex
	}
	return 0
}

func (x *ScanInfo) GetPetBedNum() int32 {
	if x != nil {
		return x.PetBedNum
	}
	return 0
}

func (x *ScanInfo) GetPetCtFirst() string {
	if x != nil {
		return x.PetCtFirst
	}
	return ""
}

func (x *ScanInfo) GetPetScanMode() string {
	if x != nil {
		return x.PetScanMode
	}
	return ""
}

func (x *ScanInfo) GetPetScanTime() string {
	if x != nil {
		return x.PetScanTime
	}
	return ""
}

func (x *ScanInfo) GetPreparation() int32 {
	if x != nil {
		return x.Preparation
	}
	return 0
}

func (x *ScanInfo) GetPreparationAt() string {
	if x != nil {
		return x.PreparationAt
	}
	return ""
}

func (x *ScanInfo) GetResidual() int32 {
	if x != nil {
		return x.Residual
	}
	return 0
}

func (x *ScanInfo) GetResidualAt() string {
	if x != nil {
		return x.ResidualAt
	}
	return ""
}

func (x *ScanInfo) GetScanId() string {
	if x != nil {
		return x.ScanId
	}
	return ""
}

func (x *ScanInfo) GetTracer() string {
	if x != nil {
		return x.Tracer
	}
	return ""
}

func (x *ScanInfo) GetVoltage() int32 {
	if x != nil {
		return x.Voltage
	}
	return 0
}

// 采集信息
type AcquisitionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuffSize    int32 `protobuf:"varint,1,opt,name=buffSize,proto3" json:"buffSize,omitempty"`
	FrameSize   int32 `protobuf:"varint,2,opt,name=frameSize,proto3" json:"frameSize,omitempty"`
	PackageNum  int32 `protobuf:"varint,3,opt,name=packageNum,proto3" json:"packageNum,omitempty"`
	PackageSize int32 `protobuf:"varint,4,opt,name=packageSize,proto3" json:"packageSize,omitempty"`
	// 930
	Length             int32     `protobuf:"varint,5,opt,name=length,proto3" json:"length,omitempty"`
	Isotope            int32     `protobuf:"varint,6,opt,name=isotope,proto3" json:"isotope,omitempty"`
	Activity           float32   `protobuf:"fixed32,7,opt,name=activity,proto3" json:"activity,omitempty"`
	InjectTime         string    `protobuf:"bytes,8,opt,name=injectTime,proto3" json:"injectTime,omitempty"`
	Time               string    `protobuf:"bytes,9,opt,name=time,proto3" json:"time,omitempty"`
	Duration           int32     `protobuf:"varint,10,opt,name=duration,proto3" json:"duration,omitempty"`
	TimeWindow         float32   `protobuf:"fixed32,11,opt,name=timeWindow,proto3" json:"timeWindow,omitempty"`
	DelayWindow        float32   `protobuf:"fixed32,12,opt,name=delayWindow,proto3" json:"delayWindow,omitempty"`
	XtalkWindow        float32   `protobuf:"fixed32,13,opt,name=xtalkWindow,proto3" json:"xtalkWindow,omitempty"`
	EnergyWindow       []float32 `protobuf:"fixed32,14,rep,packed,name=energyWindow,proto3" json:"energyWindow,omitempty"`
	PositionWindow     int32     `protobuf:"varint,15,opt,name=positionWindow,proto3" json:"positionWindow,omitempty"`
	Corrected          int32     `protobuf:"varint,16,opt,name=corrected,proto3" json:"corrected,omitempty"`
	TablePosition      float32   `protobuf:"fixed32,17,opt,name=tablePosition,proto3" json:"tablePosition,omitempty"`
	TableHeight        float32   `protobuf:"fixed32,18,opt,name=tableHeight,proto3" json:"tableHeight,omitempty"`
	PETCTSpacing       float32   `protobuf:"fixed32,19,opt,name=PETCTSpacing,proto3" json:"PETCTSpacing,omitempty"`
	TableCount         int32     `protobuf:"varint,20,opt,name=tableCount,proto3" json:"tableCount,omitempty"`
	TableIndex         int32     `protobuf:"varint,21,opt,name=tableIndex,proto3" json:"tableIndex,omitempty"`
	ScanLengthPerTable float32   `protobuf:"fixed32,22,opt,name=scanLengthPerTable,proto3" json:"scanLengthPerTable,omitempty"`
	PatientID          string    `protobuf:"bytes,23,opt,name=patientID,proto3" json:"patientID,omitempty"`
	StudyID            string    `protobuf:"bytes,24,opt,name=studyID,proto3" json:"studyID,omitempty"`
	PatientName        string    `protobuf:"bytes,25,opt,name=patientName,proto3" json:"patientName,omitempty"`
	PatientSex         string    `protobuf:"bytes,26,opt,name=patientSex,proto3" json:"patientSex,omitempty"`
	PatientHeight      float32   `protobuf:"fixed32,27,opt,name=patientHeight,proto3" json:"patientHeight,omitempty"`
	PatientWeight      float32   `protobuf:"fixed32,28,opt,name=patientWeight,proto3" json:"patientWeight,omitempty"`
}

func (x *AcquisitionInfo) Reset() {
	*x = AcquisitionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpet_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcquisitionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcquisitionInfo) ProtoMessage() {}

func (x *AcquisitionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dpet_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcquisitionInfo.ProtoReflect.Descriptor instead.
func (*AcquisitionInfo) Descriptor() ([]byte, []int) {
	return file_dpet_proto_rawDescGZIP(), []int{3}
}

func (x *AcquisitionInfo) GetBuffSize() int32 {
	if x != nil {
		return x.BuffSize
	}
	return 0
}

func (x *AcquisitionInfo) GetFrameSize() int32 {
	if x != nil {
		return x.FrameSize
	}
	return 0
}

func (x *AcquisitionInfo) GetPackageNum() int32 {
	if x != nil {
		return x.PackageNum
	}
	return 0
}

func (x *AcquisitionInfo) GetPackageSize() int32 {
	if x != nil {
		return x.PackageSize
	}
	return 0
}

func (x *AcquisitionInfo) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *AcquisitionInfo) GetIsotope() int32 {
	if x != nil {
		return x.Isotope
	}
	return 0
}

func (x *AcquisitionInfo) GetActivity() float32 {
	if x != nil {
		return x.Activity
	}
	return 0
}

func (x *AcquisitionInfo) GetInjectTime() string {
	if x != nil {
		return x.InjectTime
	}
	return ""
}

func (x *AcquisitionInfo) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *AcquisitionInfo) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *AcquisitionInfo) GetTimeWindow() float32 {
	if x != nil {
		return x.TimeWindow
	}
	return 0
}

func (x *AcquisitionInfo) GetDelayWindow() float32 {
	if x != nil {
		return x.DelayWindow
	}
	return 0
}

func (x *AcquisitionInfo) GetXtalkWindow() float32 {
	if x != nil {
		return x.XtalkWindow
	}
	return 0
}

func (x *AcquisitionInfo) GetEnergyWindow() []float32 {
	if x != nil {
		return x.EnergyWindow
	}
	return nil
}

func (x *AcquisitionInfo) GetPositionWindow() int32 {
	if x != nil {
		return x.PositionWindow
	}
	return 0
}

func (x *AcquisitionInfo) GetCorrected() int32 {
	if x != nil {
		return x.Corrected
	}
	return 0
}

func (x *AcquisitionInfo) GetTablePosition() float32 {
	if x != nil {
		return x.TablePosition
	}
	return 0
}

func (x *AcquisitionInfo) GetTableHeight() float32 {
	if x != nil {
		return x.TableHeight
	}
	return 0
}

func (x *AcquisitionInfo) GetPETCTSpacing() float32 {
	if x != nil {
		return x.PETCTSpacing
	}
	return 0
}

func (x *AcquisitionInfo) GetTableCount() int32 {
	if x != nil {
		return x.TableCount
	}
	return 0
}

func (x *AcquisitionInfo) GetTableIndex() int32 {
	if x != nil {
		return x.TableIndex
	}
	return 0
}

func (x *AcquisitionInfo) GetScanLengthPerTable() float32 {
	if x != nil {
		return x.ScanLengthPerTable
	}
	return 0
}

func (x *AcquisitionInfo) GetPatientID() string {
	if x != nil {
		return x.PatientID
	}
	return ""
}

func (x *AcquisitionInfo) GetStudyID() string {
	if x != nil {
		return x.StudyID
	}
	return ""
}

func (x *AcquisitionInfo) GetPatientName() string {
	if x != nil {
		return x.PatientName
	}
	return ""
}

func (x *AcquisitionInfo) GetPatientSex() string {
	if x != nil {
		return x.PatientSex
	}
	return ""
}

func (x *AcquisitionInfo) GetPatientHeight() float32 {
	if x != nil {
		return x.PatientHeight
	}
	return 0
}

func (x *AcquisitionInfo) GetPatientWeight() float32 {
	if x != nil {
		return x.PatientWeight
	}
	return 0
}

// 设备信息
type ScannerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 几何结构信息
	BlockNumX     int32   `protobuf:"varint,1,opt,name=blockNumX,proto3" json:"blockNumX,omitempty"`
	BlockNumY     int32   `protobuf:"varint,2,opt,name=blockNumY,proto3" json:"blockNumY,omitempty"`
	BlockNumZ     int32   `protobuf:"varint,3,opt,name=blockNumZ,proto3" json:"blockNumZ,omitempty"`
	BlockPitchX   float32 `protobuf:"fixed32,4,opt,name=blockPitchX,proto3" json:"blockPitchX,omitempty"`
	BlockPitchY   float32 `protobuf:"fixed32,5,opt,name=blockPitchY,proto3" json:"blockPitchY,omitempty"`
	BlockPitchZ   float32 `protobuf:"fixed32,6,opt,name=blockPitchZ,proto3" json:"blockPitchZ,omitempty"`
	BlockSizeX    float32 `protobuf:"fixed32,7,opt,name=blockSizeX,proto3" json:"blockSizeX,omitempty"`
	BlockSizeY    float32 `protobuf:"fixed32,8,opt,name=blockSizeY,proto3" json:"blockSizeY,omitempty"`
	BlockSizeZ    float32 `protobuf:"fixed32,9,opt,name=blockSizeZ,proto3" json:"blockSizeZ,omitempty"`
	CrystalNumX   int32   `protobuf:"varint,10,opt,name=crystalNumX,proto3" json:"crystalNumX,omitempty"`
	CrystalNumY   int32   `protobuf:"varint,11,opt,name=crystalNumY,proto3" json:"crystalNumY,omitempty"`
	CrystalNumZ   int32   `protobuf:"varint,12,opt,name=crystalNumZ,proto3" json:"crystalNumZ,omitempty"`
	CrystalOffset float32 `protobuf:"fixed32,13,opt,name=crystalOffset,proto3" json:"crystalOffset,omitempty"`
	CrystalPitchX float32 `protobuf:"fixed32,14,opt,name=crystalPitchX,proto3" json:"crystalPitchX,omitempty"`
	CrystalPitchY float32 `protobuf:"fixed32,15,opt,name=crystalPitchY,proto3" json:"crystalPitchY,omitempty"`
	CrystalPitchZ float32 `protobuf:"fixed32,16,opt,name=crystalPitchZ,proto3" json:"crystalPitchZ,omitempty"`
	CrystalSizeX  float32 `protobuf:"fixed32,17,opt,name=crystalSizeX,proto3" json:"crystalSizeX,omitempty"`
	CrystalSizeY  float32 `protobuf:"fixed32,18,opt,name=crystalSizeY,proto3" json:"crystalSizeY,omitempty"`
	CrystalSizeZ  float32 `protobuf:"fixed32,19,opt,name=crystalSizeZ,proto3" json:"crystalSizeZ,omitempty"`
	ModuleNumX    int32   `protobuf:"varint,20,opt,name=moduleNumX,proto3" json:"moduleNumX,omitempty"`
	ModuleNumY    int32   `protobuf:"varint,21,opt,name=moduleNumY,proto3" json:"moduleNumY,omitempty"`
	ModuleNumZ    int32   `protobuf:"varint,22,opt,name=moduleNumZ,proto3" json:"moduleNumZ,omitempty"`
	ModulePitchX  float32 `protobuf:"fixed32,23,opt,name=modulePitchX,proto3" json:"modulePitchX,omitempty"`
	ModulePitchY  float32 `protobuf:"fixed32,24,opt,name=modulePitchY,proto3" json:"modulePitchY,omitempty"`
	ModulePitchZ  float32 `protobuf:"fixed32,25,opt,name=modulePitchZ,proto3" json:"modulePitchZ,omitempty"`
	ModuleSizeX   float32 `protobuf:"fixed32,26,opt,name=moduleSizeX,proto3" json:"moduleSizeX,omitempty"`
	ModuleSizeY   float32 `protobuf:"fixed32,27,opt,name=moduleSizeY,proto3" json:"moduleSizeY,omitempty"`
	ModuleSizeZ   float32 `protobuf:"fixed32,28,opt,name=moduleSizeZ,proto3" json:"moduleSizeZ,omitempty"`
	PanelNum      int32   `protobuf:"varint,29,opt,name=panelNum,proto3" json:"panelNum,omitempty"`
	PanelPitchX   float32 `protobuf:"fixed32,30,opt,name=panelPitchX,proto3" json:"panelPitchX,omitempty"`
	PanelPitchY   float32 `protobuf:"fixed32,31,opt,name=panelPitchY,proto3" json:"panelPitchY,omitempty"`
	PanelPitchZ   float32 `protobuf:"fixed32,32,opt,name=panelPitchZ,proto3" json:"panelPitchZ,omitempty"`
	PanelSizeX    float32 `protobuf:"fixed32,33,opt,name=panelSizeX,proto3" json:"panelSizeX,omitempty"`
	PanelSizeY    float32 `protobuf:"fixed32,34,opt,name=panelSizeY,proto3" json:"panelSizeY,omitempty"`
	PanelSizeZ    float32 `protobuf:"fixed32,35,opt,name=panelSizeZ,proto3" json:"panelSizeZ,omitempty"`
	PositionSize  float32 `protobuf:"fixed32,36,opt,name=positionSize,proto3" json:"positionSize,omitempty"`
	ScannerRadius float32 `protobuf:"fixed32,37,opt,name=scannerRadius,proto3" json:"scannerRadius,omitempty"`
	// 设备其它信息
	Device string `protobuf:"bytes,38,opt,name=device,proto3" json:"device,omitempty"`
	Serial string `protobuf:"bytes,39,opt,name=serial,proto3" json:"serial,omitempty"`
	// 930
	Length            int32     `protobuf:"varint,40,opt,name=length,proto3" json:"length,omitempty"`
	MvtThresholds     []float32 `protobuf:"fixed32,41,rep,packed,name=mvtThresholds,proto3" json:"mvtThresholds,omitempty"`
	MvtParam          []float32 `protobuf:"fixed32,42,rep,packed,name=mvtParam,proto3" json:"mvtParam,omitempty"`
	AxisDetectors     int32     `protobuf:"varint,43,opt,name=axisDetectors,proto3" json:"axisDetectors,omitempty"`
	TransDetectors    int32     `protobuf:"varint,44,opt,name=transDetectors,proto3" json:"transDetectors,omitempty"`
	DetectorsRings    int32     `protobuf:"varint,45,opt,name=detectorsRings,proto3" json:"detectorsRings,omitempty"`
	DetectorsChannels int32     `protobuf:"varint,46,opt,name=detectorsChannels,proto3" json:"detectorsChannels,omitempty"`
	IpCounts          int32     `protobuf:"varint,47,opt,name=ipCounts,proto3" json:"ipCounts,omitempty"`
	IpStart           int32     `protobuf:"varint,48,opt,name=ipStart,proto3" json:"ipStart,omitempty"`
	ChannelCounts     int32     `protobuf:"varint,49,opt,name=channelCounts,proto3" json:"channelCounts,omitempty"`
	ChannelStart      int32     `protobuf:"varint,50,opt,name=channelStart,proto3" json:"channelStart,omitempty"`
}

func (x *ScannerInfo) Reset() {
	*x = ScannerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpet_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScannerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScannerInfo) ProtoMessage() {}

func (x *ScannerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dpet_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScannerInfo.ProtoReflect.Descriptor instead.
func (*ScannerInfo) Descriptor() ([]byte, []int) {
	return file_dpet_proto_rawDescGZIP(), []int{4}
}

func (x *ScannerInfo) GetBlockNumX() int32 {
	if x != nil {
		return x.BlockNumX
	}
	return 0
}

func (x *ScannerInfo) GetBlockNumY() int32 {
	if x != nil {
		return x.BlockNumY
	}
	return 0
}

func (x *ScannerInfo) GetBlockNumZ() int32 {
	if x != nil {
		return x.BlockNumZ
	}
	return 0
}

func (x *ScannerInfo) GetBlockPitchX() float32 {
	if x != nil {
		return x.BlockPitchX
	}
	return 0
}

func (x *ScannerInfo) GetBlockPitchY() float32 {
	if x != nil {
		return x.BlockPitchY
	}
	return 0
}

func (x *ScannerInfo) GetBlockPitchZ() float32 {
	if x != nil {
		return x.BlockPitchZ
	}
	return 0
}

func (x *ScannerInfo) GetBlockSizeX() float32 {
	if x != nil {
		return x.BlockSizeX
	}
	return 0
}

func (x *ScannerInfo) GetBlockSizeY() float32 {
	if x != nil {
		return x.BlockSizeY
	}
	return 0
}

func (x *ScannerInfo) GetBlockSizeZ() float32 {
	if x != nil {
		return x.BlockSizeZ
	}
	return 0
}

func (x *ScannerInfo) GetCrystalNumX() int32 {
	if x != nil {
		return x.CrystalNumX
	}
	return 0
}

func (x *ScannerInfo) GetCrystalNumY() int32 {
	if x != nil {
		return x.CrystalNumY
	}
	return 0
}

func (x *ScannerInfo) GetCrystalNumZ() int32 {
	if x != nil {
		return x.CrystalNumZ
	}
	return 0
}

func (x *ScannerInfo) GetCrystalOffset() float32 {
	if x != nil {
		return x.CrystalOffset
	}
	return 0
}

func (x *ScannerInfo) GetCrystalPitchX() float32 {
	if x != nil {
		return x.CrystalPitchX
	}
	return 0
}

func (x *ScannerInfo) GetCrystalPitchY() float32 {
	if x != nil {
		return x.CrystalPitchY
	}
	return 0
}

func (x *ScannerInfo) GetCrystalPitchZ() float32 {
	if x != nil {
		return x.CrystalPitchZ
	}
	return 0
}

func (x *ScannerInfo) GetCrystalSizeX() float32 {
	if x != nil {
		return x.CrystalSizeX
	}
	return 0
}

func (x *ScannerInfo) GetCrystalSizeY() float32 {
	if x != nil {
		return x.CrystalSizeY
	}
	return 0
}

func (x *ScannerInfo) GetCrystalSizeZ() float32 {
	if x != nil {
		return x.CrystalSizeZ
	}
	return 0
}

func (x *ScannerInfo) GetModuleNumX() int32 {
	if x != nil {
		return x.ModuleNumX
	}
	return 0
}

func (x *ScannerInfo) GetModuleNumY() int32 {
	if x != nil {
		return x.ModuleNumY
	}
	return 0
}

func (x *ScannerInfo) GetModuleNumZ() int32 {
	if x != nil {
		return x.ModuleNumZ
	}
	return 0
}

func (x *ScannerInfo) GetModulePitchX() float32 {
	if x != nil {
		return x.ModulePitchX
	}
	return 0
}

func (x *ScannerInfo) GetModulePitchY() float32 {
	if x != nil {
		return x.ModulePitchY
	}
	return 0
}

func (x *ScannerInfo) GetModulePitchZ() float32 {
	if x != nil {
		return x.ModulePitchZ
	}
	return 0
}

func (x *ScannerInfo) GetModuleSizeX() float32 {
	if x != nil {
		return x.ModuleSizeX
	}
	return 0
}

func (x *ScannerInfo) GetModuleSizeY() float32 {
	if x != nil {
		return x.ModuleSizeY
	}
	return 0
}

func (x *ScannerInfo) GetModuleSizeZ() float32 {
	if x != nil {
		return x.ModuleSizeZ
	}
	return 0
}

func (x *ScannerInfo) GetPanelNum() int32 {
	if x != nil {
		return x.PanelNum
	}
	return 0
}

func (x *ScannerInfo) GetPanelPitchX() float32 {
	if x != nil {
		return x.PanelPitchX
	}
	return 0
}

func (x *ScannerInfo) GetPanelPitchY() float32 {
	if x != nil {
		return x.PanelPitchY
	}
	return 0
}

func (x *ScannerInfo) GetPanelPitchZ() float32 {
	if x != nil {
		return x.PanelPitchZ
	}
	return 0
}

func (x *ScannerInfo) GetPanelSizeX() float32 {
	if x != nil {
		return x.PanelSizeX
	}
	return 0
}

func (x *ScannerInfo) GetPanelSizeY() float32 {
	if x != nil {
		return x.PanelSizeY
	}
	return 0
}

func (x *ScannerInfo) GetPanelSizeZ() float32 {
	if x != nil {
		return x.PanelSizeZ
	}
	return 0
}

func (x *ScannerInfo) GetPositionSize() float32 {
	if x != nil {
		return x.PositionSize
	}
	return 0
}

func (x *ScannerInfo) GetScannerRadius() float32 {
	if x != nil {
		return x.ScannerRadius
	}
	return 0
}

func (x *ScannerInfo) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *ScannerInfo) GetSerial() string {
	if x != nil {
		return x.Serial
	}
	return ""
}

func (x *ScannerInfo) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *ScannerInfo) GetMvtThresholds() []float32 {
	if x != nil {
		return x.MvtThresholds
	}
	return nil
}

func (x *ScannerInfo) GetMvtParam() []float32 {
	if x != nil {
		return x.MvtParam
	}
	return nil
}

func (x *ScannerInfo) GetAxisDetectors() int32 {
	if x != nil {
		return x.AxisDetectors
	}
	return 0
}

func (x *ScannerInfo) GetTransDetectors() int32 {
	if x != nil {
		return x.TransDetectors
	}
	return 0
}

func (x *ScannerInfo) GetDetectorsRings() int32 {
	if x != nil {
		return x.DetectorsRings
	}
	return 0
}

func (x *ScannerInfo) GetDetectorsChannels() int32 {
	if x != nil {
		return x.DetectorsChannels
	}
	return 0
}

func (x *ScannerInfo) GetIpCounts() int32 {
	if x != nil {
		return x.IpCounts
	}
	return 0
}

func (x *ScannerInfo) GetIpStart() int32 {
	if x != nil {
		return x.IpStart
	}
	return 0
}

func (x *ScannerInfo) GetChannelCounts() int32 {
	if x != nil {
		return x.ChannelCounts
	}
	return 0
}

func (x *ScannerInfo) GetChannelStart() int32 {
	if x != nil {
		return x.ChannelStart
	}
	return 0
}

// 符合信息
type CoincidenceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BedNum             int32   `protobuf:"varint,1,opt,name=bedNum,proto3" json:"bedNum,omitempty"`
	CoinType           string  `protobuf:"bytes,2,opt,name=coinType,proto3" json:"coinType,omitempty"`
	CoincidenceId      string  `protobuf:"bytes,3,opt,name=coincidenceId,proto3" json:"coincidenceId,omitempty"`
	Date               string  `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`
	Description        string  `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Device             string  `protobuf:"bytes,6,opt,name=device,proto3" json:"device,omitempty"`
	EnergyWindowEnd    float32 `protobuf:"fixed32,7,opt,name=energyWindowEnd,proto3" json:"energyWindowEnd,omitempty"`
	EnergyWindowsStart float32 `protobuf:"fixed32,8,opt,name=energyWindowsStart,proto3" json:"energyWindowsStart,omitempty"`
	MergingAlgorithm   string  `protobuf:"bytes,9,opt,name=mergingAlgorithm,proto3" json:"mergingAlgorithm,omitempty"`
	TimingWindow       float32 `protobuf:"fixed32,10,opt,name=timingWindow,proto3" json:"timingWindow,omitempty"`
	UsingGpu           bool    `protobuf:"varint,11,opt,name=usingGpu,proto3" json:"usingGpu,omitempty"`
}

func (x *CoincidenceInfo) Reset() {
	*x = CoincidenceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpet_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoincidenceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoincidenceInfo) ProtoMessage() {}

func (x *CoincidenceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dpet_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoincidenceInfo.ProtoReflect.Descriptor instead.
func (*CoincidenceInfo) Descriptor() ([]byte, []int) {
	return file_dpet_proto_rawDescGZIP(), []int{5}
}

func (x *CoincidenceInfo) GetBedNum() int32 {
	if x != nil {
		return x.BedNum
	}
	return 0
}

func (x *CoincidenceInfo) GetCoinType() string {
	if x != nil {
		return x.CoinType
	}
	return ""
}

func (x *CoincidenceInfo) GetCoincidenceId() string {
	if x != nil {
		return x.CoincidenceId
	}
	return ""
}

func (x *CoincidenceInfo) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *CoincidenceInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CoincidenceInfo) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *CoincidenceInfo) GetEnergyWindowEnd() float32 {
	if x != nil {
		return x.EnergyWindowEnd
	}
	return 0
}

func (x *CoincidenceInfo) GetEnergyWindowsStart() float32 {
	if x != nil {
		return x.EnergyWindowsStart
	}
	return 0
}

func (x *CoincidenceInfo) GetMergingAlgorithm() string {
	if x != nil {
		return x.MergingAlgorithm
	}
	return ""
}

func (x *CoincidenceInfo) GetTimingWindow() float32 {
	if x != nil {
		return x.TimingWindow
	}
	return 0
}

func (x *CoincidenceInfo) GetUsingGpu() bool {
	if x != nil {
		return x.UsingGpu
	}
	return false
}

// 图像信息
type ImageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Length               int32     `protobuf:"varint,1,opt,name=length,proto3" json:"length,omitempty"`
	ImageSizeRows        int32     `protobuf:"varint,2,opt,name=imageSizeRows,proto3" json:"imageSizeRows,omitempty"`
	ImageSizeCols        int32     `protobuf:"varint,3,opt,name=imageSizeCols,proto3" json:"imageSizeCols,omitempty"`
	ImageSizeSlices      int32     `protobuf:"varint,4,opt,name=imageSizeSlices,proto3" json:"imageSizeSlices,omitempty"`
	ImageRowPixelSize    float32   `protobuf:"fixed32,5,opt,name=imageRowPixelSize,proto3" json:"imageRowPixelSize,omitempty"`
	ImageColumnPixelSize float32   `protobuf:"fixed32,6,opt,name=imageColumnPixelSize,proto3" json:"imageColumnPixelSize,omitempty"`
	ImageSliceThickness  float32   `protobuf:"fixed32,7,opt,name=imageSliceThickness,proto3" json:"imageSliceThickness,omitempty"`
	ReconMethod          string    `protobuf:"bytes,8,opt,name=reconMethod,proto3" json:"reconMethod,omitempty"`
	MaxRingDiffNum       int32     `protobuf:"varint,9,opt,name=maxRingDiffNum,proto3" json:"maxRingDiffNum,omitempty"`
	SubsetNum            int32     `protobuf:"varint,10,opt,name=subsetNum,proto3" json:"subsetNum,omitempty"`
	IterNum              int32     `protobuf:"varint,11,opt,name=iterNum,proto3" json:"iterNum,omitempty"`
	AttnCalibration      int32     `protobuf:"varint,12,opt,name=attnCalibration,proto3" json:"attnCalibration,omitempty"`
	ScatCalibration      int32     `protobuf:"varint,13,opt,name=scatCalibration,proto3" json:"scatCalibration,omitempty"`
	ScatPara             []float32 `protobuf:"fixed32,14,rep,packed,name=scatPara,proto3" json:"scatPara,omitempty"`
	PetCtFovOffset       []float32 `protobuf:"fixed32,15,rep,packed,name=petCtFovOffset,proto3" json:"petCtFovOffset,omitempty"`
	CtRotationAngle      float32   `protobuf:"fixed32,16,opt,name=ctRotationAngle,proto3" json:"ctRotationAngle,omitempty"`
	SeriesNumber         int32     `protobuf:"varint,17,opt,name=seriesNumber,proto3" json:"seriesNumber,omitempty"`
	ReconSoftwareVersion string    `protobuf:"bytes,18,opt,name=reconSoftwareVersion,proto3" json:"reconSoftwareVersion,omitempty"`
	PromptsCounts        int32     `protobuf:"varint,19,opt,name=promptsCounts,proto3" json:"promptsCounts,omitempty"`
	DelayCounts          int32     `protobuf:"varint,20,opt,name=delayCounts,proto3" json:"delayCounts,omitempty"`
}

func (x *ImageInfo) Reset() {
	*x = ImageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpet_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageInfo) ProtoMessage() {}

func (x *ImageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dpet_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageInfo.ProtoReflect.Descriptor instead.
func (*ImageInfo) Descriptor() ([]byte, []int) {
	return file_dpet_proto_rawDescGZIP(), []int{6}
}

func (x *ImageInfo) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *ImageInfo) GetImageSizeRows() int32 {
	if x != nil {
		return x.ImageSizeRows
	}
	return 0
}

func (x *ImageInfo) GetImageSizeCols() int32 {
	if x != nil {
		return x.ImageSizeCols
	}
	return 0
}

func (x *ImageInfo) GetImageSizeSlices() int32 {
	if x != nil {
		return x.ImageSizeSlices
	}
	return 0
}

func (x *ImageInfo) GetImageRowPixelSize() float32 {
	if x != nil {
		return x.ImageRowPixelSize
	}
	return 0
}

func (x *ImageInfo) GetImageColumnPixelSize() float32 {
	if x != nil {
		return x.ImageColumnPixelSize
	}
	return 0
}

func (x *ImageInfo) GetImageSliceThickness() float32 {
	if x != nil {
		return x.ImageSliceThickness
	}
	return 0
}

func (x *ImageInfo) GetReconMethod() string {
	if x != nil {
		return x.ReconMethod
	}
	return ""
}

func (x *ImageInfo) GetMaxRingDiffNum() int32 {
	if x != nil {
		return x.MaxRingDiffNum
	}
	return 0
}

func (x *ImageInfo) GetSubsetNum() int32 {
	if x != nil {
		return x.SubsetNum
	}
	return 0
}

func (x *ImageInfo) GetIterNum() int32 {
	if x != nil {
		return x.IterNum
	}
	return 0
}

func (x *ImageInfo) GetAttnCalibration() int32 {
	if x != nil {
		return x.AttnCalibration
	}
	return 0
}

func (x *ImageInfo) GetScatCalibration() int32 {
	if x != nil {
		return x.ScatCalibration
	}
	return 0
}

func (x *ImageInfo) GetScatPara() []float32 {
	if x != nil {
		return x.ScatPara
	}
	return nil
}

func (x *ImageInfo) GetPetCtFovOffset() []float32 {
	if x != nil {
		return x.PetCtFovOffset
	}
	return nil
}

func (x *ImageInfo) GetCtRotationAngle() float32 {
	if x != nil {
		return x.CtRotationAngle
	}
	return 0
}

func (x *ImageInfo) GetSeriesNumber() int32 {
	if x != nil {
		return x.SeriesNumber
	}
	return 0
}

func (x *ImageInfo) GetReconSoftwareVersion() string {
	if x != nil {
		return x.ReconSoftwareVersion
	}
	return ""
}

func (x *ImageInfo) GetPromptsCounts() int32 {
	if x != nil {
		return x.PromptsCounts
	}
	return 0
}

func (x *ImageInfo) GetDelayCounts() int32 {
	if x != nil {
		return x.DelayCounts
	}
	return 0
}

var File_dpet_proto protoreflect.FileDescriptor

var file_dpet_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x64, 0x70, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb5, 0x02, 0x0a,
	0x0d, 0x50, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2b,
	0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x08, 0x73,
	0x63, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x53, 0x63, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x73, 0x63, 0x61, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x3a, 0x0a, 0x0f, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x41, 0x63,
	0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x61,
	0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e,
	0x0a, 0x0b, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0b, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3a,
	0x0a, 0x0f, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x63, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x63, 0x6f, 0x69, 0x6e, 0x63,
	0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x09, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x8a, 0x01, 0x0a, 0x0a, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x12, 0x64, 0x61,
	0x74, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x52, 0x12, 0x64, 0x61, 0x74,
	0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x12,
	0x10, 0x0a, 0x03, 0x4d, 0x44, 0x35, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4d, 0x44,
	0x35, 0x22, 0xba, 0x06, 0x0a, 0x08, 0x53, 0x63, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a,
	0x0a, 0x08, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x74,
	0x42, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x63, 0x74, 0x42, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x74,
	0x42, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x74,
	0x42, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x74, 0x53, 0x63, 0x61, 0x6e,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x74,
	0x53, 0x63, 0x61, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x74,
	0x53, 0x63, 0x61, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x04, 0x64, 0x6f, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x6e, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x43, 0x6f, 0x69, 0x6e,
	0x57, 0x69, 0x74, 0x68, 0x53, 0x63, 0x61, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x69, 0x73, 0x43, 0x6f, 0x69, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x72,
	0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x65, 0x74, 0x42, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x70, 0x65, 0x74, 0x42, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x65, 0x74, 0x42, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x70, 0x65, 0x74, 0x42, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x65, 0x74, 0x43, 0x74, 0x46, 0x69, 0x72, 0x73, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x65, 0x74, 0x43, 0x74, 0x46, 0x69, 0x72, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x65, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x65, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x65, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x65, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x69,
	0x64, 0x75, 0x61, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x73, 0x69,
	0x64, 0x75, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x69, 0x64, 0x75, 0x61, 0x6c,
	0x41, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x69, 0x64, 0x75,
	0x61, 0x6c, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x22, 0x9b,
	0x07, 0x0a, 0x0f, 0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x66, 0x66, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x75, 0x66, 0x66, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x6f, 0x74, 0x6f, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x69, 0x73, 0x6f, 0x74, 0x6f, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a,
	0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x74, 0x69, 0x6d, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x6c, 0x61, 0x79, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x20,
	0x0a, 0x0b, 0x78, 0x74, 0x61, 0x6c, 0x6b, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0b, 0x78, 0x74, 0x61, 0x6c, 0x6b, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x18, 0x0e, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0c, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x20, 0x0a, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x45, 0x54, 0x43, 0x54, 0x53, 0x70, 0x61, 0x63, 0x69,
	0x6e, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x50, 0x45, 0x54, 0x43, 0x54, 0x53,
	0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x63, 0x61, 0x6e, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x50, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x12, 0x73, 0x63, 0x61, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x50, 0x65,
	0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x75, 0x64, 0x79, 0x49, 0x44, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x75, 0x64, 0x79, 0x49, 0x44, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x78, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x78,
	0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x70,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xa3, 0x0d, 0x0a,
	0x0b, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x58, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x58, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x59, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x59, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x4e, 0x75, 0x6d, 0x5a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x5a, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x50,
	0x69, 0x74, 0x63, 0x68, 0x58, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x50, 0x69, 0x74, 0x63, 0x68, 0x58, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x50, 0x69, 0x74, 0x63, 0x68, 0x59, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x69, 0x74, 0x63, 0x68, 0x59, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x50, 0x69, 0x74, 0x63, 0x68, 0x5a, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x69, 0x74, 0x63, 0x68, 0x5a, 0x12, 0x1e, 0x0a, 0x0a,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x58, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x58, 0x12, 0x1e, 0x0a, 0x0a,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x59, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x59, 0x12, 0x1e, 0x0a, 0x0a,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x5a, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x5a, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x58, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x63, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x58, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x59, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x59,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x5a, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x4e, 0x75,
	0x6d, 0x5a, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x63, 0x72, 0x79, 0x73, 0x74,
	0x61, 0x6c, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x72, 0x79, 0x73,
	0x74, 0x61, 0x6c, 0x50, 0x69, 0x74, 0x63, 0x68, 0x58, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0d, 0x63, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x50, 0x69, 0x74, 0x63, 0x68, 0x58, 0x12, 0x24,
	0x0a, 0x0d, 0x63, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x50, 0x69, 0x74, 0x63, 0x68, 0x59, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x63, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x50, 0x69,
	0x74, 0x63, 0x68, 0x59, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x50,
	0x69, 0x74, 0x63, 0x68, 0x5a, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x63, 0x72, 0x79,
	0x73, 0x74, 0x61, 0x6c, 0x50, 0x69, 0x74, 0x63, 0x68, 0x5a, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x72,
	0x79, 0x73, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x58, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0c, 0x63, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x58, 0x12, 0x22,
	0x0a, 0x0c, 0x63, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x59, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x63, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a,
	0x65, 0x59, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a,
	0x65, 0x5a, 0x18, 0x13, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x63, 0x72, 0x79, 0x73, 0x74, 0x61,
	0x6c, 0x53, 0x69, 0x7a, 0x65, 0x5a, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x4e, 0x75, 0x6d, 0x58, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x58, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x4e, 0x75, 0x6d, 0x59, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x59, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x4e, 0x75, 0x6d, 0x5a, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x5a, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x50, 0x69, 0x74, 0x63, 0x68, 0x58, 0x18, 0x17, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x50, 0x69, 0x74, 0x63, 0x68, 0x58, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x50, 0x69, 0x74, 0x63, 0x68, 0x59, 0x18, 0x18, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x69, 0x74, 0x63, 0x68, 0x59, 0x12, 0x22,
	0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x69, 0x74, 0x63, 0x68, 0x5a, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x69, 0x74, 0x63,
	0x68, 0x5a, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x58, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x58, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x59, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x59, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x5a, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x5a, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x6e, 0x65,
	0x6c, 0x4e, 0x75, 0x6d, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x6e, 0x65,
	0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x50, 0x69, 0x74,
	0x63, 0x68, 0x58, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x70, 0x61, 0x6e, 0x65, 0x6c,
	0x50, 0x69, 0x74, 0x63, 0x68, 0x58, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x50,
	0x69, 0x74, 0x63, 0x68, 0x59, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x70, 0x61, 0x6e,
	0x65, 0x6c, 0x50, 0x69, 0x74, 0x63, 0x68, 0x59, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x6e, 0x65,
	0x6c, 0x50, 0x69, 0x74, 0x63, 0x68, 0x5a, 0x18, 0x20, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x70,
	0x61, 0x6e, 0x65, 0x6c, 0x50, 0x69, 0x74, 0x63, 0x68, 0x5a, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61,
	0x6e, 0x65, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x58, 0x18, 0x21, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a,
	0x70, 0x61, 0x6e, 0x65, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x58, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61,
	0x6e, 0x65, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x59, 0x18, 0x22, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a,
	0x70, 0x61, 0x6e, 0x65, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x59, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61,
	0x6e, 0x65, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x5a, 0x18, 0x23, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a,
	0x70, 0x61, 0x6e, 0x65, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x5a, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x61,
	0x64, 0x69, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0d,
	0x6d, 0x76, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x18, 0x29, 0x20,
	0x03, 0x28, 0x02, 0x52, 0x0d, 0x6d, 0x76, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x76, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x2a,
	0x20, 0x03, 0x28, 0x02, 0x52, 0x08, 0x6d, 0x76, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x24,
	0x0a, 0x0d, 0x61, 0x78, 0x69, 0x73, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18,
	0x2b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x78, 0x69, 0x73, 0x44, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x44, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e,
	0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x2d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x2f,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x69, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x30, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x69, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x31, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x22, 0xff, 0x02, 0x0a, 0x0f, 0x43, 0x6f, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x65, 0x64, 0x4e, 0x75, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x62, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f,
	0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x45, 0x6e,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x45, 0x6e, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x65, 0x6e, 0x65, 0x72,
	0x67, 0x79, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x65, 0x72, 0x67,
	0x69, 0x6e, 0x67, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x6d, 0x65, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x69, 0x6e,
	0x67, 0x47, 0x70, 0x75, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x75, 0x73, 0x69, 0x6e,
	0x67, 0x47, 0x70, 0x75, 0x22, 0x91, 0x06, 0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x6f, 0x77, 0x73,
	0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x6c,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x43, 0x6f, 0x6c, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x73,
	0x12, 0x2c, 0x0a, 0x11, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x6f, 0x77, 0x50, 0x69, 0x78, 0x65,
	0x6c, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x6f, 0x77, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x32,
	0x0a, 0x14, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x50, 0x69, 0x78,
	0x65, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x6c, 0x69, 0x63, 0x65,
	0x54, 0x68, 0x69, 0x63, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x13, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x54, 0x68, 0x69, 0x63, 0x6b,
	0x6e, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x52, 0x69, 0x6e,
	0x67, 0x44, 0x69, 0x66, 0x66, 0x4e, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x6d, 0x61, 0x78, 0x52, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x66, 0x66, 0x4e, 0x75, 0x6d, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x73, 0x75, 0x62, 0x73, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07,
	0x69, 0x74, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x69,
	0x74, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x74, 0x74, 0x6e, 0x43, 0x61,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x61, 0x74, 0x74, 0x6e, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x28, 0x0a, 0x0f, 0x73, 0x63, 0x61, 0x74, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x63, 0x61, 0x74, 0x43,
	0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63,
	0x61, 0x74, 0x50, 0x61, 0x72, 0x61, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x02, 0x52, 0x08, 0x73, 0x63,
	0x61, 0x74, 0x50, 0x61, 0x72, 0x61, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x65, 0x74, 0x43, 0x74, 0x46,
	0x6f, 0x76, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0e,
	0x70, 0x65, 0x74, 0x43, 0x74, 0x46, 0x6f, 0x76, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x28,
	0x0a, 0x0f, 0x63, 0x74, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x67, 0x6c,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x63, 0x74, 0x52, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x14,
	0x72, 0x65, 0x63, 0x6f, 0x6e, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x72, 0x65, 0x63, 0x6f,
	0x6e, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2a, 0x86, 0x01, 0x0a, 0x08, 0x46, 0x69, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61,
	0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f,
	0x69, 0x6e, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x69, 0x63, 0x68, 0x10, 0x02, 0x12, 0x07,
	0x0a, 0x03, 0x49, 0x6d, 0x67, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x6e, 0x65, 0x72, 0x67,
	0x79, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x10,
	0x04, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x6e, 0x65,
	0x72, 0x67, 0x79, 0x53, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x10,
	0x06, 0x2a, 0x21, 0x0a, 0x12, 0x44, 0x61, 0x74, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x65, 0x66, 0x6c, 0x61,
	0x74, 0x65, 0x10, 0x00, 0x42, 0x1e, 0x5a, 0x1c, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6c, 0x6f, 0x75, 0x69, 0x73, 0x32, 0x39, 0x36, 0x2f, 0x70, 0x65, 0x74, 0x2f,
	0x64, 0x70, 0x65, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dpet_proto_rawDescOnce sync.Once
	file_dpet_proto_rawDescData = file_dpet_proto_rawDesc
)

func file_dpet_proto_rawDescGZIP() []byte {
	file_dpet_proto_rawDescOnce.Do(func() {
		file_dpet_proto_rawDescData = protoimpl.X.CompressGZIP(file_dpet_proto_rawDescData)
	})
	return file_dpet_proto_rawDescData
}

var file_dpet_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_dpet_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_dpet_proto_goTypes = []interface{}{
	(FileType)(0),           // 0: FileType
	(DataTransferSyntax)(0), // 1: DataTransferSyntax
	(*PetFileHeader)(nil),   // 2: PetFileHeader
	(*PublicInfo)(nil),      // 3: PublicInfo
	(*ScanInfo)(nil),        // 4: ScanInfo
	(*AcquisitionInfo)(nil), // 5: AcquisitionInfo
	(*ScannerInfo)(nil),     // 6: ScannerInfo
	(*CoincidenceInfo)(nil), // 7: CoincidenceInfo
	(*ImageInfo)(nil),       // 8: ImageInfo
}
var file_dpet_proto_depIdxs = []int32{
	3, // 0: PetFileHeader.publicInfo:type_name -> PublicInfo
	4, // 1: PetFileHeader.scanInfo:type_name -> ScanInfo
	5, // 2: PetFileHeader.acquisitionInfo:type_name -> AcquisitionInfo
	6, // 3: PetFileHeader.scannerInfo:type_name -> ScannerInfo
	7, // 4: PetFileHeader.coincidenceInfo:type_name -> CoincidenceInfo
	8, // 5: PetFileHeader.imageInfo:type_name -> ImageInfo
	0, // 6: PublicInfo.fileType:type_name -> FileType
	1, // 7: PublicInfo.dataTransferSyntax:type_name -> DataTransferSyntax
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_dpet_proto_init() }
func file_dpet_proto_init() {
	if File_dpet_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dpet_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PetFileHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpet_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpet_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScanInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpet_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcquisitionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpet_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScannerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpet_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoincidenceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpet_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dpet_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dpet_proto_goTypes,
		DependencyIndexes: file_dpet_proto_depIdxs,
		EnumInfos:         file_dpet_proto_enumTypes,
		MessageInfos:      file_dpet_proto_msgTypes,
	}.Build()
	File_dpet_proto = out.File
	file_dpet_proto_rawDesc = nil
	file_dpet_proto_goTypes = nil
	file_dpet_proto_depIdxs = nil
}
